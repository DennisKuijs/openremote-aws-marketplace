AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys an OpenRemote instance
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      -
        Label:
          default: Instance Configuration
        Parameters:
          - Name
          - Instance
          - Hostname
          - Keypair
          - SSHLocation
      - Label:
          default: OpenRemote Configuration
        Parameters:
          - Password
          - MapTiles
          - MapSettings
      - Label:
          default: E-mail Configuration
        Parameters:
          - SMTPHost
          - SMTPUser
          - SMTPPassword
          - SMTPPort
          - SMTPTLS
          - SMTPFrom
          - SMTPProtocol

Parameters:
    Name:
      Description: The name for this EC2 Instance on the EC2 Overview page
      Type: String
      Default: OpenRemote
    Instance:
      Description: Choose a instance based on your monthly budget
      Type: String
      Default: Medium
      AllowedValues:
        - Small
        - Medium
        - Large
    Hostname:
      Description: Fill in the FQDN (Fully Qualified Domain Name) that you want to use for this OpenRemote instance
      Type: String
    Keypair:
      Description: Choose a keypair for SSH Access
      Type: AWS::EC2::KeyPair::KeyName
    SSHLocation:
      Description: Fill in your Home IP for SSH Access. Set CIDR to x.x.x.x/32.
      Type: String
      AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
      ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Password:
      Description: Create an (admin) password for your OpenRemote instance
      Type: String
      MinLength: 8
      AllowedPattern: ^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[^0-9a-zA-Z])(?=\S+$).{8,}$
      ConstraintDescription: Password must contain 1 or more uppercase characters. Password must contain 1 or more digit characters. Password must contain 1 or more special characters. Password must be 8 or more characters in length.
      NoEcho: true
    MapTiles:
      Description: Put a link where the system can download your (custom) maptiles
      Type: String
    MapSettings:
      Description: Put a link where the system can download your mapsettings.json file
      Type: String
    SMTPHost:
      Description: Fill in the SMTP Hostname for sending e-mails
      Type: String
    SMTPUser:
      Description: Fill in the SMTP username for sending e-mails
      Type: String
    SMTPPassword:
      Description: Fill in the SMTP password for sending e-mails
      Type: String
      NoEcho: true
    SMTPPort:
      Description: Fill in the SMTP port for sending e-mails
      Type: Number
      Default: 587
    SMTPTLS:
      Description: Select if you want to use TLS for sending e-mails
      Type: String 
      AllowedValues:
        - true
        - false
      Default: true
    SMTPFrom:
      Description: Fill in the From e-mail address you want to use for sending e-mails
      Type: String
    SMTPProtocol:
      Description: Select the SMTP protocol you want to use for sending e-mails (smtps = SSL)
      Type: String
      AllowedValues:
        - smtp
        - smtps
      Default: smtps

Mappings:
  InstanceType:
    default:
      Small: t4g.small
      Medium: t4g.medium
      Large: t4g.large

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.20.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref Name

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: Name
          Value: !Ref Name
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 172.20.0.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref Name
  
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key: Name
          Value: !Ref Name
      VpcId: !Ref VPC
  
  Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  
  RouteTableAssociate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: OpenRemote Security Group
      GroupName: !Ref Name
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref SSHLocation
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
          Description: SSH Access
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
          Description: HTTP Access
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
          Description: HTTPS Access
        - CidrIp: 0.0.0.0/0
          FromPort: 8883
          IpProtocol: tcp
          ToPort: 8883
          Description: MQTT Access
        - CidrIp: 0.0.0.0/0
          FromPort: 162
          IpProtocol: udp
          ToPort: 162
          Description: SNMP Access
  
  InstanceOR:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:  
            - installOpenRemote

        installOpenRemote:
          commands:
            01_install_docker:
              command: |
                sudo yum install -y docker
                sudo service docker start

            02_install_docker_compose:
              command: |
                sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
              
            03_download_config:
              command: |
                sudo mkdir openremote
                sudo wget https://raw.githubusercontent.com/openremote/openremote/master/docker-compose.yml -P /openremote

            04_create_instance:
              command: !Sub |
                PUBLIC_IPV4=$(curl v4.ident.me 2>/dev/null)

                if [ -z "${Hostname}" ]; then
                  export OR_HOSTNAME=$PUBLIC_IPV4
                  echo "No Hostname provided, using the public IP address"
                else
                  export OR_HOSTNAME=${Hostname}
                  echo "Using the provided Hostname"
                fi

                export OR_ADMIN_PASSWORD=${Password}
                export OR_EMAIL_HOST=${SMTPHost}
                export OR_EMAIL_USER=${SMTPUser}
                export OR_EMAIL_PASSWORD=${SMTPPassword}
                export OR_EMAIL_PORT=${SMTPPort}
                export OR_EMAIL_TLS=${SMTPTLS}
                export OR_EMAIL_FROM=${SMTPFrom}
                export OR_EMAIL_PROTOCOL=${SMTPProtocol}

                docker-compose -f /openremote/docker-compose.yml -p openremote up -d --no-start
              
            05_install_map:
              command: !Sub |
                if [[ -z "${MapTiles}" || -z "${MapSettings}" ]]; then
                  echo "No MapTiles and MapSettings provided, using the default one"
                  exit 0
                fi

                sudo mkdir map
                sudo wget -O /map/mapdata.mbtiles "${MapTiles}"
                sudo wget -O /map/mapsettings.json "${MapSettings}"
                sudo docker cp /map/mapdata.mbtiles openremote-manager-1:/opt/map/mapdata.mbtiles
                sudo docker cp /map/mapsettings.json openremote-manager-1:/opt/map/mapsettings.json
          
            06_start_instance:
              command: |
                sudo docker-compose -f /openremote/docker-compose.yml start

            07_create_systemd_service:
              command: |
                sudo systemctl enable docker
                sudo systemctl start docker
    Properties:
      ImageId: 'ami-00b777c899f47763b'
      InstanceType: !FindInMap
        - InstanceType
        - default
        - !Ref Instance
      KeyName: !Ref Keypair
      SubnetId: !Ref Subnet
      SecurityGroupIds:
      -  !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: !Ref Name
      BlockDeviceMappings:
       - DeviceName: /dev/xvda
         Ebs:
          VolumeSize: 30
          VolumeType: gp3
          DeleteOnTermination: true
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            yum -y install aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v -s ${AWS::StackName} --resource InstanceOR
  
  StaticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref InstanceOR
      Tags:
        - Key: Name
          Value: !Ref Name

Outputs:
  PublicIP:
    Description: The Public IP Address of the newly created EC2 instance
    Value: !GetAtt InstanceOR.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-PublicIP"