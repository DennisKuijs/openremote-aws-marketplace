AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template to deploy an EC2 instance

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2'
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket containing the docker-compose.yml file
  S3Key:
    Type: String
    Description: Key of the docker-compose.yml file in the S3 bucket

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: MyPublicSubnet

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MyRouteTable

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH, HTTP, HTTPS, MQTT, SNMP, and Ping
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
          Description: SSH
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
          Description: HTTP
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
          Description: HTTPS
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIpv6: ::/0
          Description: HTTP
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIpv6: ::/0
          Description: HTTPS
        - IpProtocol: tcp
          FromPort: '8883'
          ToPort: '8883'
          CidrIp: 0.0.0.0/0
          Description: MQTT
        - IpProtocol: tcp
          FromPort: '8883'
          ToPort: '8883'
          CidrIpv6: ::/0
          Description: MQTT
        - IpProtocol: udp
          FromPort: '161'
          ToPort: '162'
          CidrIp: 0.0.0.0/0
          Description: SNMP
        - IpProtocol: udp
          FromPort: '161'
          ToPort: '162'
          CidrIpv6: ::/0
          Description: SNMP
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
          Description: Ping
        - IpProtocol: icmpv6
          FromPort: '-1'
          ToPort: '-1'
          CidrIpv6: ::/0
          Description: Ping
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  EC2InstancePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3AccessPolicy
      Roles:
        - Ref: EC2InstanceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
  
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EC2InstanceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t4g.medium
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      KeyName: OpenRemote
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Name
          Value: MyEC2Instance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Install Docker
          amazon-linux-extras install docker -y
          systemctl start docker
          systemctl enable docker

          # Add ec2-user to docker group
          usermod -aG docker ec2-user

          # Install Docker Compose as root
          sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          echo "OR_HOSTNAME=$PUBLIC_IP" > /home/ec2-user/.env
          
          # Download docker-compose.yml from S3
          aws s3 cp s3://${S3BucketName}/${S3Key} /home/ec2-user/docker-compose.yml

          # Change permissions to ec2-user
          chown ec2-user:ec2-user /home/ec2-user/docker-compose.yml

          # Use newgrp docker for the current session (no need to log out and back in)
          newgrp docker <<EONG
          # Run docker-compose as ec2-user
          docker-compose -f /home/ec2-user/docker-compose.yml -p openremote up -d
          EONG
